@model List<DevOpsManager.Models.Project>
@{
    ViewData["Title"] = "Список проектов";
}

<h2>@ViewData["Title"]</h2>

<div class="text-end mb-3">
    <a asp-controller="Project" asp-action="Edit" asp-route-id="0" class="btn btn-success">Новый проект</a>
</div>

<table class="table table-bordered table-striped" id="projectsTable">
    <thead>
        <tr>
            <th><a href="javascript:void(0);" onclick="sortTable(0)">Название</a></th>
            <th><a href="javascript:void(0);" onclick="sortTable(1)">Код</a></th>
            <th><a href="javascript:void(0);" onclick="sortTable(2)">Управление задачами (Jira)</a></th>
            <th><a href="javascript:void(0);" onclick="sortTable(3)">Статус</a></th>
            <th><a href="javascript:void(0);" onclick="sortTable(4)">Владелец</a></th>
            <th>Действия</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var project in Model)
        {
            <tr>
                <td>@project.Name</td>
                <td>@project.Code</td>
                <td>
                    @if (!string.IsNullOrEmpty(project.JiraUrl))
                    {
                        <a href="@project.JiraUrl" target="_blank">Jira</a>
                    }
                </td>
                <td>@project.Status</td>
                <td>
                    @project.Owner?.FullName
                    @if (!string.IsNullOrEmpty(project.Owner?.SlackHandle))
                    {
                        <span> (<a href="https://slack.com/app_redirect?channel=@(project.Owner.SlackHandle.TrimStart('@'))">@project.Owner.SlackHandle</a>)</span>
                    }
                </td>
                <td>
                    <a asp-controller="Project" asp-action="Edit" asp-route-id="@project.Id" class="btn btn-sm btn-primary">Редактировать</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    function sortTable(columnIndex) {
        const table = document.getElementById("projectsTable");
        const rows = Array.from(table.rows).slice(1); // Пропускаем заголовок
        let switching = true;
        let dir = "asc"; // Начинаем с сортировки по возрастанию
        let switchCount = 0;

        while (switching) {
            switching = false;

            for (let i = 0; i < rows.length - 1; i++) {
                const x = rows[i].getElementsByTagName("TD")[columnIndex];
                const y = rows[i + 1].getElementsByTagName("TD")[columnIndex];

                let shouldSwitch = false;

                // Сортировка строк в зависимости от типа данных
                if (dir === "asc") {
                    if (compareCells(x, y) > 0) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir === "desc") {
                    if (compareCells(x, y) < 0) {
                        shouldSwitch = true;
                        break;
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchCount++;
                }
            }

            if (switchCount === 0 && dir === "asc") {
                dir = "desc";
                switching = true;
            }
        }
    }

    // Функция для сравнения ячеек в зависимости от типа данных
    function compareCells(x, y) {
        const xText = x.textContent.trim();
        const yText = y.textContent.trim();

        // Если значения числовые
        if (!isNaN(xText) && !isNaN(yText)) {
            return parseFloat(xText) - parseFloat(yText);
        }

        // Если значения строки
        return xText.localeCompare(yText);
    }
</script>
