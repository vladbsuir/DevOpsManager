// <auto-generated />
using System;
using DevOpsManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DevOpsManager.Migrations
{
    [DbContext(typeof(DevOpsManagerContext))]
    [Migration("20250510104751_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Deployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeployedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeployedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MicroserviceId")
                        .HasColumnType("integer");

                    b.Property<string>("RemoteLogsUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MicroserviceId");

                    b.ToTable("Deployments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeployedAt = new DateTime(2025, 5, 1, 11, 30, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "valakhanovich",
                            Environment = "Prod",
                            MicroserviceId = 1,
                            RemoteLogsUrl = "https://logs.example.com/cicd/orchestrator/deploy/1.0.0",
                            Status = "Success",
                            Version = "1.0.0"
                        },
                        new
                        {
                            Id = 2,
                            DeployedAt = new DateTime(2025, 5, 2, 7, 15, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "kirilov",
                            Environment = "Prod",
                            MicroserviceId = 2,
                            RemoteLogsUrl = "https://logs.example.com/monitoring/collector/deploy/1.0.0",
                            Status = "Success",
                            Version = "1.0.0"
                        },
                        new
                        {
                            Id = 3,
                            DeployedAt = new DateTime(2025, 5, 2, 7, 20, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "kirilov",
                            Environment = "Prod",
                            MicroserviceId = 3,
                            RemoteLogsUrl = "https://logs.example.com/monitoring/notifier/deploy/1.0.0",
                            Status = "Success",
                            Version = "1.0.0"
                        },
                        new
                        {
                            Id = 4,
                            DeployedAt = new DateTime(2025, 4, 28, 14, 0, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "dronov",
                            Environment = "Staging",
                            MicroserviceId = 4,
                            RemoteLogsUrl = "https://logs.example.com/apigw/core/deploy/2.1.0",
                            Status = "Success",
                            Version = "2.1.0"
                        },
                        new
                        {
                            Id = 5,
                            DeployedAt = new DateTime(2025, 5, 5, 6, 45, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "ivanchenko",
                            Environment = "Prod",
                            MicroserviceId = 5,
                            RemoteLogsUrl = "https://logs.example.com/user/api/deploy/1.0.1",
                            Status = "Success",
                            Version = "1.0.1"
                        },
                        new
                        {
                            Id = 6,
                            DeployedAt = new DateTime(2025, 5, 7, 10, 0, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "sergeev",
                            Environment = "Dev",
                            MicroserviceId = 6,
                            RemoteLogsUrl = "https://logs.example.com/billing/core/deploy/3.0.0-beta",
                            Status = "Success",
                            Version = "3.0.0-beta"
                        },
                        new
                        {
                            Id = 7,
                            DeployedAt = new DateTime(2025, 5, 6, 8, 30, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "stepanova",
                            Environment = "Staging",
                            MicroserviceId = 7,
                            RemoteLogsUrl = "https://logs.example.com/notify/sender/deploy/1.2.0",
                            Status = "Failed",
                            Version = "1.2.0"
                        },
                        new
                        {
                            Id = 8,
                            DeployedAt = new DateTime(2025, 5, 3, 12, 10, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "nikitin",
                            Environment = "Prod",
                            MicroserviceId = 8,
                            RemoteLogsUrl = "https://logs.example.com/analytics/ingest/deploy/2.0.0",
                            Status = "Success",
                            Version = "2.0.0"
                        },
                        new
                        {
                            Id = 9,
                            DeployedAt = new DateTime(2025, 5, 4, 15, 0, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "andreeva",
                            Environment = "Prod",
                            MicroserviceId = 9,
                            RemoteLogsUrl = "https://logs.example.com/auth/core/deploy/1.3.0",
                            Status = "Success",
                            Version = "1.3.0"
                        },
                        new
                        {
                            Id = 10,
                            DeployedAt = new DateTime(2025, 5, 8, 9, 0, 0, 0, DateTimeKind.Utc),
                            DeployedBy = "kozlova",
                            Environment = "Staging",
                            MicroserviceId = 10,
                            RemoteLogsUrl = "https://logs.example.com/portal/frontend/deploy/1.0.0-rc",
                            Status = "Success",
                            Version = "1.0.0-rc"
                        });
                });

            modelBuilder.Entity("DevOpsManager.Models.Microservice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrafanaPanelUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HealthcheckEndpoint")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogsUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Microservices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Environment = "Prod",
                            GrafanaPanelUrl = "https://grafana.example.com/d/cicd",
                            HealthcheckEndpoint = "https://cicd.example.com/health",
                            ImageUrl = "registry.example.com/cicd/orchestrator:latest",
                            LogsUrl = "https://logs.example.com/cicd/orchestrator",
                            Name = "CI/CD Orchestrator",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Environment = "Prod",
                            GrafanaPanelUrl = "https://grafana.example.com/d/monitoring",
                            HealthcheckEndpoint = "https://monitoring.example.com/collector/health",
                            ImageUrl = "registry.example.com/monitoring/collector:1.0.0",
                            LogsUrl = "https://logs.example.com/monitoring/collector",
                            Name = "Monitoring Collector",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 3,
                            Environment = "Prod",
                            GrafanaPanelUrl = "https://grafana.example.com/d/monitoring",
                            HealthcheckEndpoint = "https://monitoring.example.com/notifier/health",
                            ImageUrl = "registry.example.com/monitoring/notifier:1.0.0",
                            LogsUrl = "https://logs.example.com/monitoring/notifier",
                            Name = "Monitoring Notifier",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 4,
                            Environment = "Staging",
                            GrafanaPanelUrl = "https://grafana.example.com/d/apigw",
                            HealthcheckEndpoint = "https://apigw.example.com/health",
                            ImageUrl = "registry.example.com/api-gw/core:2.1.0",
                            LogsUrl = "https://logs.example.com/apigw/core",
                            Name = "API Gateway Core",
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 5,
                            Environment = "Prod",
                            GrafanaPanelUrl = "https://grafana.example.com/d/user",
                            HealthcheckEndpoint = "https://user.example.com/api/health",
                            ImageUrl = "registry.example.com/user/api:1.0.1",
                            LogsUrl = "https://logs.example.com/user/api",
                            Name = "User API",
                            ProjectId = 4
                        },
                        new
                        {
                            Id = 6,
                            Environment = "Dev",
                            GrafanaPanelUrl = "https://grafana.example.com/d/billing",
                            HealthcheckEndpoint = "https://billing.example.com/core/health",
                            ImageUrl = "registry.example.com/billing/core:3.0.0",
                            LogsUrl = "https://logs.example.com/billing/core",
                            Name = "Billing Core",
                            ProjectId = 5
                        },
                        new
                        {
                            Id = 7,
                            Environment = "Staging",
                            GrafanaPanelUrl = "https://grafana.example.com/d/notify",
                            HealthcheckEndpoint = "https://notify.example.com/sender/health",
                            ImageUrl = "registry.example.com/notify/sender:1.2.0",
                            LogsUrl = "https://logs.example.com/notify/sender",
                            Name = "Notification Sender",
                            ProjectId = 6
                        },
                        new
                        {
                            Id = 8,
                            Environment = "Prod",
                            GrafanaPanelUrl = "https://grafana.example.com/d/analytics",
                            HealthcheckEndpoint = "https://analytics.example.com/ingest/health",
                            ImageUrl = "registry.example.com/analytics/ingest:2.0.0",
                            LogsUrl = "https://logs.example.com/analytics/ingest",
                            Name = "Analytics Ingest",
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 9,
                            Environment = "Prod",
                            GrafanaPanelUrl = "https://grafana.example.com/d/auth",
                            HealthcheckEndpoint = "https://auth.example.com/core/health",
                            ImageUrl = "registry.example.com/auth/core:1.3.0",
                            LogsUrl = "https://logs.example.com/auth/core",
                            Name = "Auth Core",
                            ProjectId = 8
                        },
                        new
                        {
                            Id = 10,
                            Environment = "Staging",
                            GrafanaPanelUrl = "https://grafana.example.com/d/portal",
                            HealthcheckEndpoint = "https://portal.example.com/health",
                            ImageUrl = "registry.example.com/portal/frontend:1.0.0",
                            LogsUrl = "https://logs.example.com/portal/frontend",
                            Name = "Frontend UI",
                            ProjectId = 9
                        },
                        new
                        {
                            Id = 11,
                            Environment = "Dev",
                            GrafanaPanelUrl = "https://grafana.example.com/d/tools",
                            HealthcheckEndpoint = "https://tools.example.com/helper/health",
                            ImageUrl = "registry.example.com/tools/helper:0.9.5",
                            LogsUrl = "https://logs.example.com/tools/helper",
                            Name = "DevOps Helper",
                            ProjectId = 10
                        });
                });

            modelBuilder.Entity("DevOpsManager.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Permissions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Администратор",
                            Permissions = 63
                        },
                        new
                        {
                            Id = 2,
                            Name = "DevOps-инженер",
                            Permissions = 62
                        },
                        new
                        {
                            Id = 3,
                            Name = "Менеджер",
                            Permissions = 22
                        },
                        new
                        {
                            Id = 4,
                            Name = "Разработчик",
                            Permissions = 28
                        },
                        new
                        {
                            Id = 5,
                            Name = "Гость",
                            Permissions = 20
                        });
                });

            modelBuilder.Entity("DevOpsManager.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("SlackHandle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1990, 1, 4, 22, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 3, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "ИТ-отдел",
                            Email = "admin@example.com",
                            FullName = "Валаханович Владислав Александрович",
                            LastLoginAt = new DateTime(2025, 5, 8, 21, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Минск",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000001",
                            Position = "Системный администратор",
                            RoleId = 1,
                            SlackHandle = "@valakhanovich",
                            Username = "valakhanovich"
                        },
                        new
                        {
                            Id = 2,
                            BirthDate = new DateTime(1992, 6, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 8, 21, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "PMO",
                            Email = "e.egorova@example.com",
                            FullName = "Андреева Наталья Олеговна",
                            LastLoginAt = new DateTime(2025, 4, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Минск",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000002",
                            Position = "Менеджер проектов",
                            RoleId = 5,
                            SlackHandle = "@egorova",
                            Username = "egorova"
                        },
                        new
                        {
                            Id = 3,
                            BirthDate = new DateTime(1991, 3, 10, 22, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 5, 11, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Инфраструктура",
                            Email = "a.dmitriev@example.com",
                            FullName = "Дмитриев Алексей Игоревич",
                            LastLoginAt = new DateTime(2025, 1, 3, 21, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Брест",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000003",
                            Position = "DevOps-инженер",
                            RoleId = 5,
                            SlackHandle = "@dmitriev",
                            Username = "dmitriev"
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1994, 9, 17, 21, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 10, 4, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Аналитика",
                            Email = "n.kuznetsova@example.com",
                            FullName = "Кузнецова Надежда Павловна",
                            Location = "Гомель",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000004",
                            Position = "Аналитик",
                            RoleId = 5,
                            SlackHandle = "@kuznetsova",
                            Username = "kuznetsova"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1993, 12, 1, 22, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 7, 18, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Разработка",
                            Email = "p.petrov@example.com",
                            FullName = "Петров Владимир Степанович",
                            LastLoginAt = new DateTime(2025, 4, 30, 21, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Минск",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000005",
                            Position = "Backend-разработчик",
                            RoleId = 5,
                            SlackHandle = "@petrov",
                            Username = "petrov"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(1995, 2, 16, 22, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 29, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Аналитика",
                            Email = "o.sidorova@example.com",
                            FullName = "Сидорова Ольга Сергеевна",
                            LastLoginAt = new DateTime(2025, 3, 7, 21, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Витебск",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000006",
                            Position = "Бизнес-аналитик",
                            RoleId = 5,
                            SlackHandle = "@sidorova",
                            Username = "sidorova"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1996, 11, 21, 22, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 6, 10, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "QA",
                            Email = "v.karpov@example.com",
                            FullName = "Карпов Виктор Николаевич",
                            Location = "Минск",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000007",
                            Position = "Тестировщик",
                            RoleId = 5,
                            SlackHandle = "@karpov",
                            Username = "karpov"
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1992, 4, 24, 21, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 9, 4, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "BI",
                            Email = "m.zaytseva@example.com",
                            FullName = "Зайцева Марина Юрьевна",
                            LastLoginAt = new DateTime(2025, 5, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Минск",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000008",
                            Position = "BI-специалист",
                            RoleId = 5,
                            SlackHandle = "@zaytseva",
                            Username = "zaytseva"
                        },
                        new
                        {
                            Id = 9,
                            BirthDate = new DateTime(1989, 5, 7, 21, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 12, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Разработка",
                            Email = "k.novikov@example.com",
                            FullName = "Новиков Константин Аркадьевич",
                            LastLoginAt = new DateTime(2025, 3, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Location = "Минск",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000009",
                            Position = "Руководитель группы",
                            RoleId = 5,
                            SlackHandle = "@novikov",
                            Username = "novikov"
                        },
                        new
                        {
                            Id = 10,
                            BirthDate = new DateTime(2000, 8, 2, 21, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 2, 13, 21, 0, 0, 0, DateTimeKind.Utc),
                            Department = "Инфраструктура",
                            Email = "d.smirnov@example.com",
                            FullName = "Смирнов Дмитрий Иванович",
                            Location = "Минск",
                            PasswordHash = "$2a$11$/m/WVwB7JX2gQHd0eHxbFOFWDQzNvVoBC9G6HzuiLYA1.tBbMFJ9i",
                            PhoneNumber = "+375291000010",
                            Position = "Стажёр DevOps",
                            RoleId = 5,
                            SlackHandle = "@smirnov",
                            Username = "smirnov"
                        });
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConfluenceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeploymentUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GitRepository")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JiraUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("SlackChannel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CI-CD",
                            ConfluenceUrl = "https://confluence.example.com/display/CICD",
                            DeploymentUrl = "https://deploy.example.com/cicd",
                            Description = "Автоматизация CI/CD процессов",
                            Environment = "Prod",
                            GitRepository = "https://git.example.com/devops/cicd-pipeline",
                            JiraUrl = "https://jira.example.com/projects/CICD",
                            Name = "CI/CD Pipeline",
                            OwnerId = 2,
                            SlackChannel = "#cicd",
                            StartDate = new DateTime(2023, 2, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Активен"
                        },
                        new
                        {
                            Id = 2,
                            Code = "MONSYS",
                            ConfluenceUrl = "https://confluence.example.com/display/MONSYS",
                            DeploymentUrl = "https://deploy.example.com/monitoring",
                            Description = "Разработка системы мониторинга и алертинга",
                            Environment = "Prod",
                            GitRepository = "https://git.example.com/devops/monitoring",
                            JiraUrl = "https://jira.example.com/projects/MONSYS",
                            Name = "Monitoring System",
                            OwnerId = 3,
                            SlackChannel = "#monitoring",
                            StartDate = new DateTime(2022, 10, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Активен"
                        },
                        new
                        {
                            Id = 3,
                            Code = "APIGW",
                            ConfluenceUrl = "https://confluence.example.com/display/APIGW",
                            DeploymentUrl = "https://deploy.example.com/api-gw",
                            Description = "Единая точка входа для микросервисов",
                            Environment = "Staging",
                            GitRepository = "https://git.example.com/backend/api-gateway",
                            JiraUrl = "https://jira.example.com/projects/APIGW",
                            Name = "API Gateway",
                            OwnerId = 4,
                            SlackChannel = "#api-gateway",
                            StartDate = new DateTime(2023, 5, 4, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Активен"
                        },
                        new
                        {
                            Id = 4,
                            Code = "USRMGT",
                            ConfluenceUrl = "https://confluence.example.com/display/USRMGT",
                            DeploymentUrl = "https://deploy.example.com/user-mgmt",
                            Description = "Управление пользователями и ролями",
                            Environment = "Prod",
                            GitRepository = "https://git.example.com/backend/user-service",
                            JiraUrl = "https://jira.example.com/projects/USRMGT",
                            Name = "User Management",
                            OwnerId = 1,
                            SlackChannel = "#user-mgmt",
                            StartDate = new DateTime(2021, 8, 14, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Завершён"
                        },
                        new
                        {
                            Id = 5,
                            Code = "BILL",
                            ConfluenceUrl = "https://confluence.example.com/display/BILL",
                            DeploymentUrl = "https://deploy.example.com/billing",
                            Description = "Сервис расчёта и выставления счетов",
                            Environment = "Dev",
                            GitRepository = "https://git.example.com/backend/billing-service",
                            JiraUrl = "https://jira.example.com/projects/BILL",
                            Name = "Billing Service",
                            OwnerId = 5,
                            SlackChannel = "#billing",
                            StartDate = new DateTime(2022, 3, 19, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Активен"
                        },
                        new
                        {
                            Id = 6,
                            Code = "NOTIFY",
                            ConfluenceUrl = "https://confluence.example.com/display/NOTIFY",
                            DeploymentUrl = "https://deploy.example.com/notify",
                            Description = "Отправка уведомлений пользователям",
                            Environment = "Staging",
                            GitRepository = "https://git.example.com/devops/notifications",
                            JiraUrl = "https://jira.example.com/projects/NOTIFY",
                            Name = "Notification System",
                            OwnerId = 6,
                            SlackChannel = "#notifications",
                            StartDate = new DateTime(2022, 12, 31, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Активен"
                        },
                        new
                        {
                            Id = 7,
                            Code = "ANALYTICS",
                            ConfluenceUrl = "https://confluence.example.com/display/ANALYTICS",
                            DeploymentUrl = "https://deploy.example.com/analytics",
                            Description = "Платформа сбора и анализа данных",
                            Environment = "Prod",
                            GitRepository = "https://git.example.com/bi/analytics",
                            JiraUrl = "https://jira.example.com/projects/ANALYTICS",
                            Name = "Analytics Platform",
                            OwnerId = 1,
                            SlackChannel = "#analytics",
                            StartDate = new DateTime(2023, 9, 16, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Активен"
                        },
                        new
                        {
                            Id = 8,
                            Code = "AUTH",
                            ConfluenceUrl = "https://confluence.example.com/display/AUTH",
                            DeploymentUrl = "https://deploy.example.com/auth",
                            Description = "Сервис аутентификации и авторизации",
                            Environment = "Prod",
                            GitRepository = "https://git.example.com/security/auth-service",
                            JiraUrl = "https://jira.example.com/projects/AUTH",
                            Name = "Authentication Service",
                            OwnerId = 2,
                            SlackChannel = "#auth",
                            StartDate = new DateTime(2023, 4, 9, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Активен"
                        },
                        new
                        {
                            Id = 9,
                            Code = "PORTAL",
                            ConfluenceUrl = "https://confluence.example.com/display/PORTAL",
                            DeploymentUrl = "https://deploy.example.com/portal",
                            Description = "Веб-портал для конечных пользователей",
                            Environment = "Staging",
                            GitRepository = "https://git.example.com/frontend/portal",
                            JiraUrl = "https://jira.example.com/projects/PORTAL",
                            Name = "Frontend Portal",
                            OwnerId = 7,
                            SlackChannel = "#frontend",
                            StartDate = new DateTime(2022, 6, 17, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Приостановлен"
                        },
                        new
                        {
                            Id = 10,
                            Code = "TOOLS",
                            ConfluenceUrl = "https://confluence.example.com/display/TOOLS",
                            DeploymentUrl = "https://deploy.example.com/tools",
                            Description = "Внутренние инструменты команды DevOps",
                            Environment = "Dev",
                            GitRepository = "https://git.example.com/devops/tools",
                            JiraUrl = "https://jira.example.com/projects/TOOLS",
                            Name = "Internal Tools",
                            OwnerId = 9,
                            SlackChannel = "#internal-tools",
                            StartDate = new DateTime(2021, 10, 11, 21, 0, 0, 0, DateTimeKind.Utc),
                            Status = "Активен"
                        });
                });

            modelBuilder.Entity("Deployment", b =>
                {
                    b.HasOne("DevOpsManager.Models.Microservice", "Microservice")
                        .WithMany("Deployments")
                        .HasForeignKey("MicroserviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Microservice");
                });

            modelBuilder.Entity("DevOpsManager.Models.Microservice", b =>
                {
                    b.HasOne("Project", "Project")
                        .WithMany("Microservices")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("DevOpsManager.Models.User", b =>
                {
                    b.HasOne("DevOpsManager.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.HasOne("DevOpsManager.Models.User", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DevOpsManager.Models.Microservice", b =>
                {
                    b.Navigation("Deployments");
                });

            modelBuilder.Entity("DevOpsManager.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DevOpsManager.Models.User", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Navigation("Microservices");
                });
#pragma warning restore 612, 618
        }
    }
}
